=== Pengenalan OOP === // 1
adalah sudut pandang bahasa pemrograman yang berkonsep “objek”
istilah yang perlu dimengerti dalam OOP, yaitu: Object dan Class
- Object adalah data yang berisi field / properties / attributes dan method / function / behavior
- Class adalah blueprint, prototype atau cetakan untuk membuat Object
idealnya membuat class sebelum membuat object (agar terprediksi field dan method nya)
di JS Object tidak wajib membuat class dulu (sangat keren)


=== Membuat Constructor Function ===
pembuatan object menggunakan tipe data object, akan membuat object yang selalu unik,
sedangkan dalam OOP, biasanya kita akan membuat class sebagai cetakan,
sehingga bisa membuat object dengan karakteristik yang sama berkali-kali,
tanpa harus mendeklarasikan object berkali-kali seperti menggunakan tipe data object

Sebelum EcmaScript versi 6, pembuatan class, biasanya menggunakan function. 
Hal ini dikarenakan sebenarnya JavaScript bukanlah bahasa pemrograman yang fokus ke OOP
Untuk membuat class di JavaScript lama, kita bisa membuat function
Function ini kita sebut dengan Constructor Function (Diawali huruf besar: NamaFunction)


=== Property di Constructor Function ===
menggunakan kata kunci this lalu diikuti dengan nama property nya
function Person(){
    this.name = value
}
const lia = new Person; lia.name = value
sebenarnya kita bisa dengan mudah menambahkan property ke dalam object tersebut 
hanya dengan menggunakan nama variable nya, diikuti tanda titik dan nama property
const lia = new Person; lia.namaDepan = value // keunikan js


=== Method di Constructor Function ===
seperti pada tipe data object biasa, kita juga bisa menambahkan method di dalam constructor function
ketika ditambahkan method di constructor function, secara otomatis object yang dibuat akan memiliki method tersebut


=== Parameter di Constructor Function ===
dalam JS, class adalah berbentuk function, jadi secara default, function tersebut bisa memiliki parameter
constructor function sama seperti function biasanya, bisa memiliki parameter,
hal ini membuat ketika kita membuat object, kita bisa mengirim langsung data lewat parameter di constructor function tersebut


=== Constructor Inheritance === // 2
dalam constructor kita biasanya membuat property baik itu berisi value ataupun function
kita bisa memanggil constructor lain di constructor kita, untuk mewarisi semua property yang dibuat di constructor lain tersebut
Untuk memanggil constructor lain menggunakan NamaConstructor.call(this, parameter)


=== Prototype ===
JS sebelumnya dikenal dengan pemrograman berbasis prototype


=== Prototype Inheritance ===
saat membuat object dari constructor function, object tersebut disebut instance, 
semua property (baik itu value atau method), akan berada di dalam instance object nya

setiap membuat sebuah constructor function, maka secara otomatis akan dibuatkan prototype nya, 
misal membuat constructor function Person, maka akan ada Person.prototype

saat kita membuat sebuah object instance, secara otomatis object tersebut adalah turunan dari Constructor.prototype nya
untuk mengakses prototype milih sebuah instance, kita bisa menggunakan __proto__

    == Menambah Property ke Prototype VS Menambah Property ke Instance Object ==
    property mirip object, dimana kita bisa menambah property baik itu value ataupun method
    saat menambah sebuah property ke Instance Object, hanya Instance Object tersebut akan memiliki property tersebut
    saat menambah sebuah property ke Prototype, secara otomatis, semua object instance yang turunan dari prototype tersebut akan memiliki property tersebut

    == Melakukan pewarisan ==


=== Class ===
sejak EcmaScript versi 6, diperkenalkan kata kunci baru, yaitu class, ini merupakan kata kunci yang digunakan untuk membuat class di JavaScript
dengan kata kunci class, kita tidak perlu lagi menggunakan constructor function untuk membuat class
ini sama dengan function constructor


=== Constructor di Class ===
di class juga kita bisa menambah constructor, dimana dengan menggunakan constructor, 
kita juga bisa menambah parameter saat pertama kali membuat object nya
untuk membuat constructor di class, kita bisa menggunakan kata kunci constructor


=== Property di Class ===
seperti pada constructor function, dalam class pun kita bisa menambahkan property
karena hasil akhirnya adalah sebuah object, jadi menambahkan property di class bisa juga dilakukan di instance object nya (tidak direkomendasikan)


=== Method di Class ===
Membuat method di class sebenarnya bisa dilakukan dengan cara seperti menambahkan method di constructor function
Namun, hal tersebut sebenarnya menambahkan method ke dalam instance object
Khusus untuk method sebaiknya kita menambahkan ke prototype, bukan ke instance object
Untung nya di class, ada cara mudah menambahkan method dan secara otomatis ditambahkan ke prototype


=== Class Inheritance ===
sebelumnya kita sudah tahu bahwa prototype mendukung pewarisan, walaupun agak sedikit tricky cara pembuatannya
untungnya itu diperbaiki di ES6 dengan fitur class nya
sebuah class bisa melakukan pewarisan dari class lainnya dengan menggunakan kata kunci extends
di JavaScript, class inheritance sama seperti prototype inheritance, hanya bisa memiliki satu parent class


=== Super Constructor ===
Class Inheritance sifatnya seperti Prototype Inheritance
Bagaimana dengan Constructor Inheritance? Sebenarnya Constructor Inheritance hanyalah melakukan eksekusi constructor lain 
dengan tujuan agar property di constructor lain bisa ditambahkan ke instance object ini
Dalam kasus ini, jika kita ingin mencapai hasil yang sama, kita bisa menggunakan kata kunci super di dalam constructor
Kata kunci super digunakan untuk memanggil constructor super class
Jika di child class kita membuat constructor, maka kita wajib memanggil parent constructor, walaupun di parent tidak ada constructor


=== Super Method ===
kata kunci super juga bisa digunakan untuk mengakses method parent class
Caranya bisa menggunakan super titik nama function nya
Dengan kata lain, super sebenarnya adalah reference ke parent prototype, mirip seperti __proto__


=== Getter dan Setter di Class ===
Class juga mendukung pembuatan getter dan setter
Perlu diingat, getter dan setter ini akan berada di prototype, bukan di instance object
ini seperti method


=== Public Class Field ===
Biasanya, saat menambahkan field (property yang berisi value), ditambahkan di constructor
Namun, ada proposal di EcmaScript yang mengajukan pembuatan public class field ditempatkan diluar constructor,
selevel dengan penempatan  method. Proposal ini masih belum final, namun beberapa browser sudah mendukung nya

Dalam proposal tersebut juga disebutkan bahwa EcmaScript akan mendukung access modifier public dan private
Public artinya bisa diakses dari luar class, dan private hanya bisa diakses dari dalam class saja
Untuk membuat public class field, kita bisa langsung buat nama field dengan value nya selevel dengan method
Jika kita tidak memasukkan value ke dalam field tersebut, artinya field tersebut memiliki value undefined
Meskipun sudah menggunakan public class field, ini masih bisa diakses dari constructor


=== Private Class Field ===
Secara default, saat kita menambahkan field, maka field tersebut bisa diakses dari manapun
Jika kita ingin membuat field yang bersifat private (hanya bisa diakses di dalam class), 
kita bisa menggunakan tanda # sebelum nama field nya
Ini dinamakan private class field, dan hanya bisa diakses dari dalam class saja


=== Private Method ===
Sama seperti field, terdapat proposal juga untuk menambah fitur private method di EcmaScript
Dengan demikian, access modifier private juga bisa digunakan di method
Caranya sama, dengan menambahkan tanda # diawal method, maka secara otomatis method tersebut adalah private


=== Operator instanceof ===
Kadang ada kasus kita ingin mengecek apakah sebuah object merupakan instance dari class tertentu atau bukan
Kita tidak bisa menggunakan operator typeof, karena object dari class, jika kita gunakan operator typeof, hasilnya adalah “object”
Operator instanceof akan menghasilkan boolean, true jika benar object tersebut adalah instance object nya, atau false jika bukan

Operator instanceof mendukung class inheritance, 
artinya instanceof juga bisa digunakan untuk mengecek, apakah sebuah object adalah instance dari class tertentu
atau turunan dari class tertentu?


=== Static Field ===
static adalah kata kunci yang bisa kita tambahkan sebelum field atau method, 
biasannya ketika kita membuat field atau method, maka secara otomatis field akan menjadi property di instance object, 
dan method akan menjadi function di prototype
Jika kita tambahkan static, maka hal itu tidak terjadi
Menjadi milik class itu sendiri


=== Static Method ===
Kata kunci static juga tidak hanya bisa ditambahkan di field, tapi juga di method
Jika kita tambahkan di method, artinya method tersebut jadi milik class nya, bukan prototype
Dan untuk mengakses method tersebut, kita juga bisa lakukan seperti mengakses static class field


=== Error ===
Saat membuat aplikasi, sudah tentu kita tidak akan terhindar dari yang namanya error
Di JavaScript, Error merupakan sesuatu yang sudah standar
Banyak sekali class error di JavaScript, namun semua class error di JavaScript selalu berujung di class Error, 
artinya class Error adalah superclass untuk semua jenis error di JavaScript
Contoh class error yang terdapat di JavaScript contohnya SyntaxError, TypeError, EvalError, dan lain-lain
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#error_types 


=== Error Handling ===
Saat terjadi error di kode program JavaScript, kadang kita tidak ingin program kita berhenti
Di JavaScript, kita bisa menangkap jika terjadi error
Kita bisa menggunakan try catch statement untuk menangkap error
Pada block try, kita akan mencoba mengakses kode program yang bisa menyebabkan error, dan jika terjadi error, block try akan berhenti dan otomatis masuk ke block catch
Jika tidak terjadi error, block catch tidak akan dieksekusi

Kadang kita ingin melakukan sesuatu entah itu terjadi error ataupun tidak
Dalam try catch, kita bisa menambahkan block finally
Block finally ini akan selalu dieksekusi setelah try catch selesai, entah terjadi error atau tidak, block finally akan selalu dieksekusi

Kata kunci finally juga bisa digunakan tanpa perlu menggunakan catch 
Biasanya ini digunakan dalam kasus tertentu


=== Membuat Class Error ===
Walaupun JavaScript sudah memiliki standard class Error
Namun alangkah baiknya, kita membedakan tiap jenis error
Untuk membuat error sendiri secara manual sangatlah mudah, cukup membuat class turunan dari class Error
Dan jangan lupa tambahkan parameter message, agar bisa dikirimkan ke parameter di constructor class Error



=== Iterable dan Iterator ===
Salah satu fitur terbaru di ES6 adalah iterable
Iterable adalah spesial object yang memiliki standarisasi
Dengan mengikuti standarisasi Iterable, secara otomatis kita bisa melakukan iterasi terdapat data tersebut dengan menggunakan perulangan for...of
Contoh yang sudah mengikuti standarisasi Iterable adalah string, Array, Object, dan lain-lain
TBD

